@inproceedings{2007:esec_fse:cottrell,
  author = {Rylan Cottrell and Joseph J. C. Chang and Robert J. Walker and J{\"o}rg
	Denzinger},
  title = {Determining detailed structural correspondence for generalization
	tasks},
  booktitle = { In Proceedings of the European Software Engineering Conference held jointly with the ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  year = {2007},
  pages = {165--174},
  doi = {http://doi.acm.org/10.1145/1287624.1287649},
  pdf = {http://lsmr.cpsc.ucalgary.ca/resources/Papers/breakaway-cottrell-2007.pdf},
  abstract = {Generalization tasks are important for continual improvement to the
	design of an evolving code base, eliminating redundancy where it
	has accumulated. An important step in generalization is identifying
	the detailed structural correspondence between two pieces of code
	being considered for generalization. Unfortunately, tool support
	for this step is insufficient, leaving the developer to resort to
	tedious and error-prone manual determination of correspondence. This
	paper presents an approach for automatically determining correspondences
	as an early step in a generalization task. The approach is implemented
	in a proof-of-concept plug-in to the Eclipse integrated development
	environment. Two small empirical evaluations of the tool have been
	conducted: a comparison between human attempts to determine detailed
	correspondences and those of the tool; and, a comparison of the use
	of the tool to the use of diff/CCFinder in performing generalization
	tasks.}
}

@inproceedings{2009:vissoft:cottrell,
  author = {Cottrell, Rylan and Goyette, Brina and Holmes, Reid and Walker, Robert
	J. and Denzinger, J{\"o}rg},
  title = {Compare and contrast: Visual exploration of source code examples},
  booktitle = {In Proceedings of the 5th IEEE Workshop on Visualizing Software for Understanding and Analysis},
  year = {2009},
  pages = {29--32},
  doi = {http://dx.doi.org/10.1109/VISSOF.2009.5336429},
  abstract = {Understanding the commonalities and differences of a set of source
	code examples can help developers to understand or to evolve application
	programming interfaces (APIs). While several approaches exist to
	assist developers in locating source code examples, they often present
	their results only in a basic list view, with at most an indication
	of the relationship to the search query; unfortunately, they offer
	no information on how the results relate to one another. A developer
	is then faced with the highly manual task of exploring these examples
	to discern their similarities and differences. This paper describes
	our prototype tool (called Guido) for exploring source code examples,
	using their structural correspondences. The Guido tool uses multiple
	coordinated views to visualize the relationships between examples,
	in order to assist the developer in identifying common and unique
	traits between them.}
}

@inproceedings{2008:icse:cottrell,
  author = {Rylan Cottrell and Robert J. Walker and J\"{o}rg Denzinger},
  title = {Jigsaw: A tool for the small-scale reuse of source code},
  booktitle = {In Companion of the ACM/IEEE 30th International Conference on Software Engineering},
  year = {2008},
  pages = {933--934},
  pdf = {http://lsmr.cpsc.ucalgary.ca/resources/Papers/de39i-cottrell.pdf},
  doi = {http://doi.acm.org/10.1145/1370175.1370194},
  abstract = {Developers perform small-scale reuse tasks to save time and to increase
	the quality of their code. Due to the small scale of such tasks,
	the overhead in reusing source code can quickly outweigh the benefits.
	Existing approaches focus on locating source code for reuse but do
	not support the integration of the located code within the developer's
	system, thereby leaving the developer with the burden of performing
	these steps manually. This paper presents a tool, called Jigsaw,
	that uses the developer's context to help integrate the reused source
	code into the developer's own source code.}
}

@inproceedings{2008:fse:cottrell,
  author = {Rylan Cottrell and Robert J. Walker and J{\"o}rg Denzinger},
  title = {Semi-automating small-scale source code reuse via structural correspondence},
  booktitle = {In Proceedings of the Sixteenth ACM SIGSOFT International Symposim on the Foundations of Software Engineering},
  year = {2008},
  pages = {214--225},
  doi = {http://doi.acm.org/10.1145/1453101.1453130},
  pdf={http://lsmr.cs.ucalgary.ca/resources/Papers/breakaway-cottrell-2007.pdf},
  abstract = {Developers perform small-scale reuse tasks to save time and to increase
	the quality of their code, but due to their small scale, the costs
	of such tasks can quickly outweigh their benefits. Existing approaches
	focus on locating source code for reuse but do not support the integration
	of the located code within the developer's system, thereby leaving
	the developer with the burden of performing integration manually.
	This paper presents an approach that uses the developer's context
	to help integrate the reused source code into the developer's own
	source code. The approach approximates a theoretical framework (higher-order
	anti-unification modulo theories), known to be undecidable in general,
	to determine candidate correspondences between the source code to
	be reused and the developer's current (incomplete) system. This approach
	has been implemented in a prototype tool, called Jigsaw, that identifies
	and evaluates candidate correspondences greedily with respect to
	the highest similarity. Situations involving multiple candidate correspondences
	with similarities above a defined threshold are presented to the
	developer for resolution. Two empirical evaluations were conducted:
	an experiment comparing the quality of Jigsaw's results against suspected
	cases of small-scale reuse in an industrial system; and case studies
	with two industrial developers to consider its practical usefulness
	and usability issues.}
}
@inproceedings{2009:icsm:holmes,
  author = {Holmes, Reid and Cottrell, Rylan and Walker, Robert J. and Denzinger, J{\"o}rg},
  title = {The end-to-end use of source code examples: An exploratory study},
  booktitle = {In Proceedings of the 25th IEEE International Conference on Software Maintenance},
  year = {2009},
  pages = {555--558},
  doi = {http://dx.doi.org/10.1109/ICSM.2009.5306387},
  abstract = {Source code examples are valuable to developers needing to use an
	unfamiliar application programming interface (API). Numerous approaches
	exist to help developers locate source code examples; while some
	of these help the developer to select the most promising examples,
	none help the developer to reuse the example itself. Without explicit
	tool support for the complete end-to-end task, the developer can
	waste time and energy on examples that ultimately fail to be appropriate;
	as a result, the overhead required to reuse an example can restrict
	a developer's willingness to investigate multiple examples to find
	the ``best" one for their situation. This paper outlines four case
	studies involving the end-to-end use of source code examples: we
	investigate the overhead and pitfalls involved in combining a few
	state-of-the-art techniques to support the end-to-end use of source
	code examples.}
}
@techreport{2009:tr:holmes,
  author = {Reid Holmes and Rylan Cottrell and Robert J. Walker and J{\"o}rg Denzinger},
  title = {The End-to-End Use of Source Code Examples: An Exploratory Study - {A}ppendices},
  institution = {Department of Computer Science, University of Calgary},
  year = {2009},
  number = {TR-2009-934-13},
  pdf = {https://dspace.ucalgary.ca/bitstream/1880/47297/3/2009-934-13.pdf},
  doi = {http://hdl.handle.net/1880/47297},
}
@MASTERTHESIS{2008:msc:cottrell,
	author = {Rylan Cottrell},
	title = {Semi-automating Small-Scale Source Code Reuse via Structural Correspondence},
	year = {2008},
	institution = {Department of Computer Science, University of Calgary},
	pdf = {http://lsmr.cpsc.ucalgary.ca/resources/Papers/Rylan_Cottrell_MSc_Thesis_Sept08.pdf},
}